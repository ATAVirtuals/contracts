{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/RewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract RewardToken is ERC20, Ownable {\r\n\tevent TokensMinted(address indexed to, uint256 amount);\r\n\tevent TokensBurned(address indexed from, uint256 amount);\r\n\r\n\t/**\r\n\t * @dev Constructor to initialize the token with a name and symbol.\r\n\t */\r\n\tconstructor() ERC20(\"DRUGS\", \"DRUGS\") Ownable(msg.sender) {}\r\n\r\n\t/**\r\n\t * @dev Mints new tokens to a specified address.\r\n\t * @param to The address to mint tokens to.\r\n\t * @param amount The amount of tokens to mint.\r\n\t * @notice Only callable by the contract owner.\r\n\t * @custom:events Emits TokensMinted event.\r\n\t */\r\n\tfunction mint(address to, uint256 amount) external onlyOwner {\r\n\t\trequire(to != address(0), \"Cannot mint to zero address\");\r\n\t\t_mint(to, amount);\r\n\t\temit TokensMinted(to, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a specified amount of tokens from the caller's account.\r\n\t * @param amount The amount of tokens to burn.\r\n\t * @custom:events Emits TokensBurned event.\r\n\t */\r\n\tfunction burn(uint256 amount) external {\r\n\t\t_burn(msg.sender, amount);\r\n\t\temit TokensBurned(msg.sender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a specified amount of tokens from a specified account.\r\n\t * @param account The account to burn tokens from.\r\n\t * @param amount The amount of tokens to burn.\r\n\t * @notice The caller must have allowance for the account's tokens.\r\n\t * @custom:events Emits TokensBurned event.\r\n\t */\r\n\tfunction burnFrom(address account, uint256 amount) external {\r\n\t\trequire(account != address(0), \"Cannot burn from zero address\");\r\n\t\tuint256 currentAllowance = allowance(account, msg.sender);\r\n\t\trequire(\r\n\t\t\tcurrentAllowance >= amount,\r\n\t\t\t\"ERC20: burn amount exceeds allowance\"\r\n\t\t);\r\n\t\t_approve(account, msg.sender, currentAllowance - amount);\r\n\t\t_burn(account, amount);\r\n\t\temit TokensBurned(account, amount);\r\n\t}\r\n}\r\n"
    },
    "contracts/StakingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./RewardToken.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\ncontract StakingVault is Ownable, ReentrancyGuard, Pausable {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tstruct Pool {\r\n\t\tuint256 poolId; // Unique identifier for the pool\r\n\t\tIERC20 stakingToken; // Token being staked\r\n\t\tuint256[] lockPeriods; // Supported lock periods\r\n\t\tuint256[] rewardRates; // Reward rates corresponding to lock periods\r\n\t\tbool isActive; // Whether the pool is active\r\n\t}\r\n\r\n\tstruct LockInfo {\r\n\t\tuint256 lockId; // Unique identifier for the lock\r\n\t\tuint256 amount; // Amount of tokens locked\r\n\t\tuint256 lockPeriod; // Lock duration in seconds\r\n\t\tuint256 unlockTime; // Timestamp when tokens can be unlocked\r\n\t\tuint256 lastClaimTime; // Timestamp when user claimed rewards\r\n\t\tuint256 poolId; // Identifier for the pool associated with this lock\r\n\t\tbool isLocked; // Whether the lock is still active\r\n\t}\r\n\r\n\tPool[] public pools; // Array of pools\r\n\tRewardToken public rewardToken; // Reference to the rewards token\r\n\r\n\tmapping(address => LockInfo[]) public userLocks; // Tracks locks for each user\r\n\tmapping(address => uint256) public lifetimeRewards; // Tracks total rewards earned by each address\r\n\taddress[] public lockedUsers;\r\n\r\n\tevent Staked(\r\n\t\taddress indexed user,\r\n\t\tuint256 indexed poolId,\r\n\t\tuint256 amount,\r\n\t\tuint256 lockPeriod\r\n\t);\r\n\tevent Unstaked(\r\n\t\taddress indexed user,\r\n\t\tuint256 indexed poolId,\r\n\t\tuint256 amount,\r\n\t\tuint256 reward\r\n\t);\r\n\tevent RewardsClaimed(\r\n\t\taddress indexed user,\r\n\t\tuint256 indexed poolId,\r\n\t\tuint256 amount\r\n\t);\r\n\r\n\tevent Locked(\r\n\t\taddress indexed user,\r\n\t\tuint256 indexed lockId,\r\n\t\tuint256 amount,\r\n\t\tuint256 lockPeriod,\r\n\t\tuint256 unlockTime,\r\n\t\tuint256 poolId\r\n\t);\r\n\tevent Unlocked(\r\n\t\taddress indexed user,\r\n\t\tuint256 indexed lockId,\r\n\t\tuint256 amount,\r\n\t\tuint256 poolId\r\n\t);\r\n\tevent PoolAdded(uint256 indexed poolId, address indexed stakingToken);\r\n\tevent RewardRatesUpdated(uint256 indexed poolId, uint256[] newRewardRates);\r\n\tevent PoolStatusUpdated(uint256 indexed poolId, bool isActive);\r\n\r\n\t/**\r\n\t * @dev Constructor to initialize the contract with the reward token address.\r\n\t * @param _rewardToken The address of the reward token contract.\r\n\t */\r\n\tconstructor(address _rewardToken) Ownable(msg.sender) {\r\n\t\trewardToken = RewardToken(_rewardToken);\r\n\t}\r\n\r\n\t// Set the reward token address (can be called after deployment if needed)\r\n\tfunction setRewardToken(address _rewardToken) external onlyOwner {\r\n\t\trewardToken = RewardToken(_rewardToken);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a new pool for staking.\r\n\t * @param _stakingToken The token that will be staked in the pool.\r\n\t * @param _lockPeriods The array of supported lock periods for the pool.\r\n\t * @param _rewardRates The corresponding reward rates for each lock period.\r\n\t * @notice Only callable by the contract owner.\r\n\t * @notice Lock periods and reward rates must match in length.\r\n\t * @custom:events Emits PoolAdded event.\r\n\t */\r\n\tfunction addPool(\r\n\t\tIERC20 _stakingToken,\r\n\t\tuint256[] calldata _lockPeriods,\r\n\t\tuint256[] calldata _rewardRates\r\n\t) external onlyOwner {\r\n\t\trequire(\r\n\t\t\taddress(_stakingToken) != address(0),\r\n\t\t\t\"Invalid staking token address\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_lockPeriods.length == _rewardRates.length,\r\n\t\t\t\"Mismatched lock periods and rates\"\r\n\t\t);\r\n\r\n\t\tuint256 poolId = pools.length;\r\n\r\n\t\tpools.push(\r\n\t\t\tPool({\r\n\t\t\t\tpoolId: poolId,\r\n\t\t\t\tstakingToken: _stakingToken,\r\n\t\t\t\tlockPeriods: _lockPeriods,\r\n\t\t\t\trewardRates: _rewardRates,\r\n\t\t\t\tisActive: true\r\n\t\t\t})\r\n\t\t);\r\n\t\temit PoolAdded(poolId, address(_stakingToken));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Activate or deactivate a staking pool.\r\n\t * @param poolId The ID of the pool to update.\r\n\t * @param isActive The new status of the pool (active or inactive).\r\n\t * @notice Only callable by the contract owner.\r\n\t * @custom:events Emits PoolStatusUpdated event.\r\n\t */\r\n\tfunction setPoolStatus(uint256 poolId, bool isActive) external onlyOwner {\r\n\t\trequire(poolId < pools.length, \"Pool does not exist\");\r\n\r\n\t\tpools[poolId].isActive = isActive;\r\n\r\n\t\temit PoolStatusUpdated(poolId, isActive);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Update the reward rates for a specific pool.\r\n\t * @param poolId The ID of the pool to update.\r\n\t * @param newRewardRates The new reward rates corresponding to the existing lock periods.\r\n\t * @notice Only callable by the contract owner.\r\n\t * @notice Reward rates must match the number of lock periods.\r\n\t * @custom:events Emits RewardRatesUpdated event.\r\n\t */\r\n\tfunction updateRewardRates(\r\n\t\tuint256 poolId,\r\n\t\tuint256[] memory newRewardRates\r\n\t) external onlyOwner {\r\n\t\trequire(poolId < pools.length, \"Pool does not exist\");\r\n\t\tPool storage pool = pools[poolId];\r\n\t\trequire(\r\n\t\t\tpool.lockPeriods.length == newRewardRates.length,\r\n\t\t\t\"Mismatched lock periods and reward rates\"\r\n\t\t);\r\n\r\n\t\tpool.rewardRates = newRewardRates;\r\n\r\n\t\temit RewardRatesUpdated(poolId, newRewardRates);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Stake tokens in a specific pool with a lock period.\r\n\t * @param poolId The ID of the pool to stake in.\r\n\t * @param _amount The amount of tokens to stake.\r\n\t * @param _lockPeriod The duration for which the tokens will be locked.\r\n\t * @notice This function can be paused by the contract owner in case of emergencies.\r\n\t * @custom:events Emits Staked event.\r\n\t */\r\n\tfunction stake(\r\n\t\tuint256 poolId,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _lockPeriod\r\n\t) external whenNotPaused {\r\n\t\trequire(poolId < pools.length, \"Invalid pool ID\");\r\n\t\tPool memory pool = pools[poolId];\r\n\t\trequire(pool.isActive, \"Pool is not active\");\r\n\r\n\t\t// Determine reward rate\r\n\t\tuint256 rewardRate = getRewardRate(poolId, _lockPeriod);\r\n\t\trequire(rewardRate > 0, \"Invalid lock period\");\r\n\r\n\t\t// Transfer staking tokens to contract\r\n\t\tpool.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n\t\t// Lock tokens\r\n\t\tlock(msg.sender, poolId, _amount, _lockPeriod);\r\n\r\n\t\temit Staked(msg.sender, poolId, _amount, _lockPeriod);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Unstake tokens and claim rewards for a specific lock.\r\n\t * @param poolId The ID of the pool to unstake from.\r\n\t * @param lockId The ID of the lock to unlock.\r\n\t */\r\n\tfunction unstake(uint256 poolId, uint256 lockId) external {\r\n\t\trequire(poolId < pools.length, \"Invalid pool ID\");\r\n\t\trequire(lockId < userLocks[msg.sender].length, \"Invalid lock ID\");\r\n\t\tPool memory pool = pools[poolId];\r\n\r\n\t\t// Calculate pending rewards\r\n\t\tuint256 pendingRewards = calculateRewards(msg.sender, lockId);\r\n\r\n\t\t// Unlock tokens\r\n\t\t(uint256 amount, bool locked) = unlock(msg.sender, lockId);\r\n\t\trequire(!locked, \"Lock period not yet over\");\r\n\r\n\t\t// Mint rewards and transfer staked tokens back to user\r\n\t\trewardToken.mint(msg.sender, pendingRewards);\r\n\t\tpool.stakingToken.safeTransfer(msg.sender, amount);\r\n\r\n\t\t// Update lifetime rewards and reset claim time\r\n\t\tlifetimeRewards[msg.sender] += pendingRewards;\r\n\r\n\t\t// Set last claim time\r\n\t\tLockInfo storage lockInfo = userLocks[msg.sender][lockId];\r\n\t\tlockInfo.lastClaimTime = block.timestamp;\r\n\r\n\t\temit Unstaked(msg.sender, poolId, amount, pendingRewards);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Locks the user's tokens.\r\n\t * @param user The address of the user locking the tokens.\r\n\t * @param poolId The ID of the pool the lock belongs to.\r\n\t * @param amount The amount of tokens to lock.\r\n\t * @param lockPeriod The duration for which tokens are locked.\r\n\t */\r\n\tfunction lock(\r\n\t\taddress user,\r\n\t\tuint256 poolId,\r\n\t\tuint256 amount,\r\n\t\tuint256 lockPeriod\r\n\t) internal {\r\n\t\trequire(user != address(0), \"Invalid user address\");\r\n\t\trequire(poolId < pools.length, \"Invalid pool ID\");\r\n\t\trequire(amount > 0, \"Amount must be greater than zero\");\r\n\t\trequire(lockPeriod > 0, \"Lock period must be greater than zero\");\r\n\r\n\t\tuint256 unlockTime = block.timestamp + lockPeriod;\r\n\t\tuint256 lockId = userLocks[user].length;\r\n\r\n\t\tif (userLocks[user].length == 0) {\r\n\t\t\tlockedUsers.push(user);\r\n\t\t}\r\n\t\tuserLocks[user].push(\r\n\t\t\tLockInfo({\r\n\t\t\t\tlockId: lockId,\r\n\t\t\t\tamount: amount,\r\n\t\t\t\tlockPeriod: lockPeriod,\r\n\t\t\t\tunlockTime: unlockTime,\r\n\t\t\t\tlastClaimTime: 0,\r\n\t\t\t\tpoolId: poolId,\r\n\t\t\t\tisLocked: true\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\temit Locked(user, lockId, amount, lockPeriod, unlockTime, poolId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Unlocks the user's tokens for a specific lock ID.\r\n\t * @param user The address of the user unlocking the tokens.\r\n\t * @param lockId The ID of the lock to unlock.\r\n\t * @return The amount of tokens that were unlocked and whether the lock is still active.\r\n\t * @custom:events Emits Unlocked event.\r\n\t */\r\n\tfunction unlock(\r\n\t\taddress user,\r\n\t\tuint256 lockId\r\n\t) internal returns (uint256, bool) {\r\n\t\trequire(user != address(0), \"Invalid user address\");\r\n\t\trequire(lockId < userLocks[user].length, \"Invalid lock ID\");\r\n\r\n\t\tLockInfo storage lockInfo = userLocks[user][lockId];\r\n\t\trequire(block.timestamp >= lockInfo.unlockTime, \"Lock period not over\");\r\n\t\trequire(lockInfo.isLocked, \"Lock already unlocked\");\r\n\r\n\t\tlockInfo.isLocked = false;\r\n\t\tif (userLocks[user].length == 0) {\r\n\t\t\tfor (uint256 i = 0; i < lockedUsers.length; i++) {\r\n\t\t\t\tif (lockedUsers[i] == user) {\r\n\t\t\t\t\t// Swap with the last element\r\n\t\t\t\t\tlockedUsers[i] = lockedUsers[lockedUsers.length - 1];\r\n\t\t\t\t\t// Remove the last element\r\n\t\t\t\t\tlockedUsers.pop();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\temit Unlocked(user, lockId, lockInfo.amount, lockInfo.poolId);\r\n\r\n\t\treturn (lockInfo.amount, lockInfo.isLocked);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Claims rewards for a specific lock without unlocking the tokens.\r\n\t * @param poolId The ID of the pool the rewards are being claimed from.\r\n\t * @param lockId The ID of the lock the rewards are being claimed for.\r\n\t * @custom:events Emits RewardsClaimed event.\r\n\t */\r\n\tfunction claimRewards(uint256 poolId, uint256 lockId) external {\r\n\t\trequire(poolId < pools.length, \"Invalid pool ID\");\r\n\t\trequire(lockId < userLocks[msg.sender].length, \"Invalid lock ID\");\r\n\r\n\t\t// Calculate pending rewards\r\n\t\tuint256 pendingRewards = calculateRewards(msg.sender, lockId);\r\n\t\trequire(pendingRewards > 0, \"No rewards available\");\r\n\r\n\t\t// Mint rewards\r\n\t\trewardToken.mint(msg.sender, pendingRewards);\r\n\r\n\t\t// Update lifetime rewards and claim time\r\n\t\tlifetimeRewards[msg.sender] += pendingRewards;\r\n\r\n\t\t// Update last claim time\r\n\t\tLockInfo storage lockInfo = userLocks[msg.sender][lockId];\r\n\t\tlockInfo.lastClaimTime = block.timestamp;\r\n\r\n\t\temit RewardsClaimed(msg.sender, poolId, pendingRewards);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates the pending rewards for a user based on their lock.\r\n\t * @param user The address of the user.\r\n\t * @param lockId The ID of the lock to calculate rewards for.\r\n\t * @return The amount of rewards earned for the specified lock.\r\n\t */\r\n\tfunction calculateRewards(\r\n\t\taddress user,\r\n\t\tuint256 lockId\r\n\t) public view returns (uint256) {\r\n\t\tuint256 rewards = 0;\r\n\t\tuint256 currentTime = block.timestamp;\r\n\t\tLockInfo memory lockInfo = userLocks[user][lockId];\r\n\r\n\t\t// Fetch reward rate\r\n\t\tuint256 rewardRate = getRewardRate(\r\n\t\t\tlockInfo.poolId,\r\n\t\t\tlockInfo.lockPeriod\r\n\t\t);\r\n\t\trequire(rewardRate > 0, \"Invalid lock period.\");\r\n\r\n\t\tif (lockInfo.isLocked) {\r\n\t\t\tuint256 stakingTime = currentTime -\r\n\t\t\t\t(\r\n\t\t\t\t\tlockInfo.lastClaimTime > 0\r\n\t\t\t\t\t\t? lockInfo.lastClaimTime\r\n\t\t\t\t\t\t: lockInfo.unlockTime - lockInfo.lockPeriod\r\n\t\t\t\t);\r\n\t\t\trewards +=\r\n\t\t\t\t(lockInfo.amount * rewardRate * stakingTime) /\r\n\t\t\t\t(lockInfo.lockPeriod * 10000);\r\n\t\t}\r\n\r\n\t\treturn rewards;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the reward rate for a specific pool and lock period.\r\n\t * @param poolId The ID of the pool to check.\r\n\t * @param lockPeriod The lock period to get the reward rate for.\r\n\t * @return The reward rate for the specified pool and lock period.\r\n\t */\r\n\tfunction getRewardRate(\r\n\t\tuint256 poolId,\r\n\t\tuint256 lockPeriod\r\n\t) internal view returns (uint256) {\r\n\t\tPool storage pool = pools[poolId];\r\n\t\tfor (uint256 i = 0; i < pool.lockPeriods.length; i++) {\r\n\t\t\tif (pool.lockPeriods[i] == lockPeriod) {\r\n\t\t\t\treturn pool.rewardRates[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t// Function to get total locked users\r\n\tfunction getTotalLockedUsers() external view returns (uint256) {\r\n\t\treturn lockedUsers.length;\r\n\t}\r\n\r\n\t// Function to get total staked amount for all users\r\n\tfunction getTotalStakedAmount() external view returns (uint256) {\r\n\t\tuint256 totalStaked = 0;\r\n\t\tfor (uint256 i = 0; i < lockedUsers.length; i++) {\r\n\t\t\tLockInfo[] memory locks = userLocks[lockedUsers[i]];\r\n\t\t\tfor (uint256 j = 0; j < locks.length; j++) {\r\n\t\t\t\tif (locks[j].isLocked) {\r\n\t\t\t\t\ttotalStaked += locks[j].amount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn totalStaked;\r\n\t}\r\n\r\n\t// Function to get all pools\r\n\tfunction getPools() external view returns (Pool[] memory) {\r\n\t\treturn pools;\r\n\t}\r\n\r\n\t// Function to get locked users for a specific pool\r\n\tfunction getLockedUsersByPool(\r\n\t\tuint256 poolId\r\n\t) external view returns (address[] memory) {\r\n\t\trequire(poolId < pools.length, \"Invalid pool ID\");\r\n\r\n\t\taddress[] memory poolLockedUsers = new address[](lockedUsers.length);\r\n\t\tuint256 count = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < lockedUsers.length; i++) {\r\n\t\t\tLockInfo[] memory locks = userLocks[lockedUsers[i]];\r\n\t\t\tfor (uint256 j = 0; j < locks.length; j++) {\r\n\t\t\t\tif (locks[j].poolId == poolId && locks[j].isLocked) {\r\n\t\t\t\t\tpoolLockedUsers[count] = lockedUsers[i];\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Resize the array to fit actual count\r\n\t\taddress[] memory result = new address[](count);\r\n\t\tfor (uint256 i = 0; i < count; i++) {\r\n\t\t\tresult[i] = poolLockedUsers[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Function to get total staking amount for a specific pool\r\n\tfunction getStakingAmountByPool(\r\n\t\tuint256 poolId\r\n\t) external view returns (uint256) {\r\n\t\trequire(poolId < pools.length, \"Invalid pool ID\");\r\n\r\n\t\tuint256 totalStaked = 0;\r\n\t\tfor (uint256 i = 0; i < lockedUsers.length; i++) {\r\n\t\t\tLockInfo[] memory locks = userLocks[lockedUsers[i]];\r\n\t\t\tfor (uint256 j = 0; j < locks.length; j++) {\r\n\t\t\t\tif (locks[j].poolId == poolId && locks[j].isLocked) {\r\n\t\t\t\t\ttotalStaked += locks[j].amount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn totalStaked;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the lock information for a specified user.\r\n\t * @param user The address of the user whose locks to retrieve.\r\n\t * @return An array of LockInfo structures for the specified user.\r\n\t */\r\n\tfunction getUserLocks(\r\n\t\taddress user\r\n\t) external view returns (LockInfo[] memory) {\r\n\t\treturn userLocks[user];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Retrieves the total rewards earned by a user.\r\n\t * @param user The address of the user to check.\r\n\t * @return The total amount of rewards earned by the specified user.\r\n\t */\r\n\tfunction getLifetimeRewards(address user) external view returns (uint256) {\r\n\t\treturn lifetimeRewards[user];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the owner to recover any ERC20 tokens mistakenly sent to the contract.\r\n\t * @param token The address of the ERC20 token to recover.\r\n\t * @param to The address to send the recovered tokens to.\r\n\t * @param amount The amount of tokens to recover.\r\n\t * @notice Only callable by the contract owner.\r\n\t */\r\n\tfunction recoverTokens(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) external onlyOwner {\r\n\t\trequire(to != address(0), \"Cannot recover to zero address\");\r\n\t\ttoken.safeTransfer(to, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Emergency function to reset the lock period for all users, allowing immediate withdrawal.\r\n\t * @notice This function should only be used in emergency situations where users need immediate access to their funds.\r\n\t * @notice This is a one-way operation and cannot be reversed.\r\n\t * @notice This function will unlock all locked tokens across all pools.\r\n\t * @notice Gas costs will increase with the number of pools and locked positions.\r\n\t * @custom:security-note This is a critical function that can override normal staking mechanics.\r\n\t * @custom:requirements Only callable by contract owner.\r\n\t * @custom:events Emits Unlocked event for each lock that is modified.\r\n\t */\r\n\tfunction emergencyUnlockAll() external onlyOwner {\r\n\t\tfor (uint256 i = 0; i < lockedUsers.length; i++) {\r\n\t\t\tfor (uint256 j = 0; j < userLocks[lockedUsers[i]].length; j++) {\r\n\t\t\t\tLockInfo storage lockInfo = userLocks[lockedUsers[i]][j];\r\n\t\t\t\tif (lockInfo.isLocked) {\r\n\t\t\t\t\tlockInfo.isLocked = false;\r\n\t\t\t\t\tlockInfo.unlockTime = block.timestamp;\r\n\t\t\t\t\temit Unlocked(\r\n\t\t\t\t\t\tlockedUsers[i],\r\n\t\t\t\t\t\tlockInfo.lockId,\r\n\t\t\t\t\t\tlockInfo.amount,\r\n\t\t\t\t\t\tlockInfo.poolId\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Pauses the staking functionality.\r\n\t * @notice Only callable by the contract owner.\r\n\t */\r\n\tfunction pause() external onlyOwner {\r\n\t\t_pause();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Unpauses the staking functionality.\r\n\t * @notice Only callable by the contract owner.\r\n\t */\r\n\tfunction unpause() external onlyOwner {\r\n\t\t_unpause();\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}